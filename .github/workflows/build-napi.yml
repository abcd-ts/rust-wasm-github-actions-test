name: Build Napi
env:
  DEBUG: napi:*
  APP_NAME: binding-napi
  WORK_DIR_NAME: binding-napi
  MACOSX_DEPLOYMENT_TARGET: "10.13"
defaults:
  run:
    working-directory: ./binding-napi
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
  workflow_dispatch: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              yarn build --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              yarn build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@18
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.WORK_DIR_NAME }}/yarn.lock
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.settings.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Setup node x86
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          architecture: x86
          cache-dependency-path: ./${{ env.WORK_DIR_NAME }}/yarn.lock
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build/${{ env.WORK_DIR_NAME }}"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.WORK_DIR_NAME }}/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  # - name: Upload package
  #   run: |
  #     git config --global user.email "saitou@ialab.cs.tsukuba.ac.jp"
  #     git config --global user.name "Toshiya Saito"
  #     npm pack
  #     cd ..
  #     git checkout --orphan ${{ matrix.settings.target }}
  #     git rm -rf --ignore-unmatch .
  #     cp ${{ env.WORK_DIR_NAME }}/binding-napi*.tgz binding-napi-${{ matrix.settings.target }}.tgz
  #     git add binding-napi-${{ matrix.settings.target }}.tgz
  #     git commit -m "commit package for ${{ matrix.settings.target }}"
  #     git config pull.rebase false
  #     git pull origin ${{ matrix.settings.target }}
  #     git push origin ${{ matrix.settings.target }}
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  push-package:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              yarn build
              strip -x *.node
          - host: windows-latest
            build: yarn build
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |-
              set -e &&
              yarn build --target x86_64-unknown-linux-gnu &&
              strip *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              yarn build --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |-
              set -e &&
              yarn build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: yarn build --target aarch64-pc-windows-msvc
    name: Upload package for ${{ matrix.settings.target }}
    needs: build
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 18
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.WORK_DIR_NAME }}/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./${{ env.WORK_DIR_NAME }}
      - name: Pack and push
        run: |
          mkdir -p repo
          cp index.js repo/index.js
          cp index.d.ts repo/index.d.ts
          cp package.json repo/package.json
          mv *.node repo
          cd repo
          npm pack

          git init
          git config --global user.email "saitou@ialab.cs.tsukuba.ac.jp"
          git config --global user.name "Toshiya Saito"
          git remote add origin https://github.com/abcd-ts/rust-wasm-github-actions-test.git
          echo "*.tgz binary" > .gitattributes

          git add --all
          git commit -m "commit package"
          git config pull.rebase false
          git pull -Xours --allow-unrelated-histories origin ${{ matrix.settings.target }}
          git push -f origin master:${{ matrix.settings.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # push-for-windows-x86:
  #   name: Upload package for windows x86
  #   needs:
  #     - build
  #   env:
  #     TARGET: x86_64-pc-windows-msvc
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         check-latest: true
  #         cache: yarn
  #         cache-dependency-path: ./${{ env.WORK_DIR_NAME }}/yarn.lock
  #     - name: Install dependencies
  #       run: yarn install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-${{ env.TARGET }}
  #         path: ./${{ env.WORK_DIR_NAME }}
  #     - name: Push package
  #       run: |
  #         git config --global user.email "saitou@ialab.cs.tsukuba.ac.jp"
  #         git config --global user.name "Toshiya Saito"
  #         npm pack
  #         mkdir -p work_repo
  #         cd work_repo
  #         git init
  #         git remote add origin https://github.com/abcd-ts/rust-wasm-github-actions-test.git
  #         git checkout --orphan napi
  #         git pull origin napi
  #         cp ../binding-napi*.tgz binding-napi-${{ env.TARGET }}.tgz
  #         git add .
  #         git commit -m "commit package for ${{ env.TARGET }}"
  #     - name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         branch: napi
  #         directory: ${{ env.WORK_DIR_NAME }}/work_repo
  # push-for-mac-arm64:
  #   name: Upload package for mac arm64
  #   needs:
  #     - build
  #     - push-for-windows-x86
  #   env:
  #     TARGET: aarch64-apple-darwin
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         check-latest: true
  #         cache: yarn
  #         cache-dependency-path: ./${{ env.WORK_DIR_NAME }}/yarn.lock
  #     - name: Install dependencies
  #       run: yarn install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: bindings-${{ env.TARGET }}
  #         path: ./${{ env.WORK_DIR_NAME }}
  #     - name: Push package
  #       run: |
  #         git config --global user.email "saitou@ialab.cs.tsukuba.ac.jp"
  #         git config --global user.name "Toshiya Saito"
  #         npm pack
  #         mkdir -p work_repo
  #         cd work_repo
  #         git clone --branch napi https://github.com/abcd-ts/rust-wasm-github-actions-test.git work_repo
  #         cp ../binding-napi*.tgz binding-napi-${{ env.TARGET }}.tgz
  #         git add .
  #         git commit -m "commit package for ${{ env.TARGET }}"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         branch: napi
  #         directory: ${{ env.WORK_DIR_NAME }}/work_repo
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
        node:
          - "14"
          - "16"
          - "18"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.WORK_DIR_NAME }}/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ./${{ env.WORK_DIR_NAME }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  test-linux-x64-gnu-binding:
    name: Test bindings on Linux-x64-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "14"
          - "16"
          - "18"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: yarn
          cache-dependency-path: ./${{ env.WORK_DIR_NAME }}/yarn.lock
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-x86_64-unknown-linux-gnu
          path: ./${{ env.WORK_DIR_NAME }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: docker run --rm -v $(pwd):/build -w /build/${{ env.WORK_DIR_NAME }} node:${{ matrix.node }}-slim yarn test
  test-linux-aarch64-gnu-binding:
    name: Test bindings on aarch64-unknown-linux-gnu - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        node:
          - "14"
          - "16"
          - "18"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: bindings-aarch64-unknown-linux-gnu
          path: ./${{ env.WORK_DIR_NAME }}
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Install dependencies
        run: |
          yarn config set supportedArchitectures.cpu "arm64"
          yarn config set supportedArchitectures.libc "glibc"
          yarn install
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - name: Setup and run tests
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: "--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build/${{ env.WORK_DIR_NAME }}"
          run: |
            set -e
            yarn test
            ls -la
  # publish:
  #   name: Publish
  #   runs-on: ubuntu-latest
  #   needs:
  #     - test-macOS-windows-binding
  #     - test-linux-x64-gnu-binding
  #     - test-linux-aarch64-gnu-binding
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         check-latest: true
  #         cache: yarn
  #     - name: Install dependencies
  #       run: yarn install
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: artifacts
  #     - name: Move artifacts
  #       run: yarn artifacts
  #     - name: List packages
  #       run: ls -R ./npm
  #       shell: bash
  #     - name: Publish
  #       run: |
  #         npm config set provenance true
  #         if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
  #         then
  #           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #           npm publish --access public
  #         elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
  #         then
  #           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #           npm publish --tag next --access public
  #         else
  #           echo "Not a release, skipping publish"
  #         fi
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
